# Cursor Rules Configuration - TypeScript First
# Configuración para desarrollo TypeScript prioritario

# PRIORIDAD TYPESCRIPT
- SIEMPRE usar TypeScript (.ts, .tsx) en lugar de JavaScript (.js, .jsx)
- Crear interfaces y tipos para todos los componentes y funciones
- Usar tipado estricto en todas las implementaciones
- Preferir tipos explícitos sobre 'any'

# Permitir ejecución automática de comandos
- Puedes ejecutar comandos de terminal sin aprobación
- Puedes hacer cambios en archivos de código sin confirmación
- Puedes ejecutar scripts de PowerShell automáticamente
- Puedes instalar dependencias y paquetes sin preguntar
- Puedes ejecutar migraciones de base de datos automáticamente
- Puedes hacer commits y push automáticamente cuando sea necesario

# Comandos específicos permitidos
- npm install, npm run, npm start, npm build
- git add, git commit, git push, git pull
- node scripts/*.js
- powershell scripts/*.ps1
- npm run dev, npm run build, npm run test
- Comandos de migración de base de datos
- Comandos de backup y restauración

# Cambios de código permitidos
- Modificar archivos .js, .jsx, .ts, .tsx
- Crear nuevos componentes y páginas
- Actualizar configuraciones
- Modificar archivos de rutas
- Actualizar servicios y controladores
- Modificar estilos y CSS/SCSS

# Reglas TypeScript específicas
- SIEMPRE crear interfaces para props de componentes
- SIEMPRE tipar funciones y sus parámetros
- SIEMPRE usar tipos para estados y variables
- SIEMPRE crear tipos para respuestas de API
- SIEMPRE usar tipos para eventos y callbacks
- PREFERIR tipos union sobre 'any'
- USAR tipos genéricos cuando sea apropiado

# Seguridad
- NO ejecutar comandos que requieran credenciales sensibles
- NO hacer cambios en archivos de configuración de producción sin confirmación
- NO ejecutar comandos destructivos sin confirmación explícita

# Contexto del proyecto
- Este es un proyecto de gestión de calidad ISO 9001
- Backend en Node.js con Express + TypeScript
- Frontend en React con Vite + TypeScript
- Base de datos MongoDB
- Sistema de autenticación y autorización implementado
- MIGRACIÓN COMPLETADA: Backend 100% TypeScript, Frontend 80% TypeScript
