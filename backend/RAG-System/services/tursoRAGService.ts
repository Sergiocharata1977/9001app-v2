import { MongoClient } from 'mongodb';
import OpenAI from 'openai';

interface RAGQuery {
  question: string;
  organizationId?: string;
  maxResults?: number;
  includeSources?: boolean;
  contextSize?: number;
}

interface RAGResponse {
  question: string;
  answer: string;
  confidence: number;
  sources: RAGSource[];
  totalResults: number;
  processingTime: number;
  timestamp: string;
}

interface RAGSource {
  tipo: string;
  titulo: string;
  codigo: string;
  relevancia: number;
  contenido: string;
}

interface MongoConfig {
  url: string;
  database: string;
}

/**
 * Servicio RAG optimizado para MongoDB
 * Integra OpenAI con base de datos MongoDB para respuestas inteligentes
 */
export class MongoRAGService {
  private mongoClient: any;
  private openai: OpenAI;
  private config: MongoConfig;

  constructor(config: MongoConfig, openaiApiKey: string) {
    this.config = config;
    this.mongoClient = new MongoClient(config.url);
    
    this.openai = new OpenAI({
      apiKey: openaiApiKey
    });
  }

  /**
   * Procesa una consulta completa con IA
   */
  async processQuery(query: RAGQuery): Promise<RAGResponse> {
    try {
      console.log(`üîÑ Procesando consulta RAG con MongoDB: "${query.question}"`);
      
      const startTime = Date.now();
      
      // Paso 1: Buscar datos relevantes en MongoDB
      const relevantData = await this.searchMongoData(query.question, query.organizationId);
      
      // Paso 2: Calcular relevancia
      const scoredData = relevantData.map(item => ({
        ...item,
        relevance: this.calculateRelevanceScore(query.question, item)
      })).sort((a, b) => b.relevance - a.relevance);

      // Paso 3: Seleccionar mejores resultados
      const maxResults = query.maxResults || 10;
      const topResults = scoredData.slice(0, maxResults);
      
      // Paso 4: Generar respuesta con OpenAI
      const aiResponse = await this.generateAIResponse(query.question, topResults);
      
      const processingTime = Date.now() - startTime;

      const result: RAGResponse = {
        question: query.question,
        answer: aiResponse.answer,
        confidence: aiResponse.confidence,
        sources: query.includeSources !== false ? aiResponse.sources : [],
        totalResults: scoredData.length,
        processingTime: processingTime,
        timestamp: new Date().toISOString()
      };

      console.log(`‚úÖ Consulta procesada en ${processingTime}ms con confianza ${aiResponse.confidence}%`);
      return result;
    } catch (error) {
      console.error('‚ùå Error procesando consulta RAG con MongoDB:', error);
      throw error;
    }
  }

  /**
   * Busca datos relevantes en MongoDB
   */
  private async searchMongoData(question: string, organizationId?: string): Promise<any[]> {
    const questionLower = question.toLowerCase();
    const keywords = this.extractKeywords(questionLower);
    
    // Construir consulta SQL din√°mica
    let sql = `
      SELECT 
        tipo, titulo, codigo, contenido, estado, 
        fecha_creacion, fecha_actualizacion
      FROM rag_data 
      WHERE 1=1
    `;
    
    const params: any[] = [];
    
    // Filtrar por organizaci√≥n si se especifica
    if (organizationId) {
      sql += ` AND organizacion_id = ?`;
      params.push(organizationId);
    }
    
    // Filtrar por palabras clave
    if (keywords.length > 0) {
      const keywordConditions = keywords.map(() => 
        `(titulo LIKE ? OR contenido LIKE ? OR codigo LIKE ?)`
      ).join(' OR ');
      sql += ` AND (${keywordConditions})`;
      
      keywords.forEach(keyword => {
        params.push(`%${keyword}%`, `%${keyword}%`, `%${keyword}%`);
      });
    }
    
    sql += ` ORDER BY fecha_actualizacion DESC LIMIT 50`;
    
    try {
      const result = await this.mongoClient.execute(sql, params);
      return result.rows || [];
    } catch (error) {
      console.error('Error buscando en MongoDB:', error);
      return [];
    }
  }

  /**
   * Extrae palabras clave de la pregunta
   */
  private extractKeywords(question: string): string[] {
    const stopWords = ['el', 'la', 'los', 'las', 'de', 'del', 'a', 'al', 'con', 'por', 'para', 'en', 'es', 'son', 'est√°', 'est√°n', 'como', 'qu√©', 'cu√°l', 'd√≥nde', 'cu√°ndo', 'por qu√©'];
    
    return question
      .split(' ')
      .filter(word => 
        word.length > 2 && 
        !stopWords.includes(word) &&
        !word.match(/^[0-9]+$/)
      )
      .slice(0, 5); // M√°ximo 5 palabras clave
  }

  /**
   * Calcula score de relevancia
   */
  private calculateRelevanceScore(question: string, item: any): number {
    const questionLower = question.toLowerCase();
    const titleLower = (item.titulo || '').toLowerCase();
    const contentLower = (item.contenido || '').toLowerCase();
    const codeLower = (item.codigo || '').toLowerCase();
    
    let score = 0;
    
    // Coincidencia exacta en t√≠tulo
    if (titleLower.includes(questionLower)) {
      score += 20;
    }
    
    // Coincidencia exacta en c√≥digo
    if (codeLower.includes(questionLower)) {
      score += 15;
    }
    
    // Coincidencia exacta en contenido
    if (contentLower.includes(questionLower)) {
      score += 10;
    }
    
    // Coincidencia de palabras clave
    const keywords = this.extractKeywords(questionLower);
    keywords.forEach(keyword => {
      if (titleLower.includes(keyword)) {
        score += 5;
      }
      if (codeLower.includes(keyword)) {
        score += 3;
      }
      if (contentLower.includes(keyword)) {
        score += 2;
      }
    });
    
    // Bonus por tipo de contenido
    score += this.getTypeBonus(item.tipo, questionLower);
    
    return Math.min(score, 100);
  }

  /**
   * Obtiene bonus por tipo de contenido
   */
  private getTypeBonus(type: string, question: string): number {
    const typeKeywords: { [key: string]: string[] } = {
      'norma': ['norma', 'iso', 'est√°ndar', 'requisito'],
      'proceso': ['proceso', 'procedimiento', 'flujo'],
      'indicador': ['indicador', 'kpi', 'm√©trica', 'medici√≥n'],
      'auditoria': ['auditor√≠a', 'auditoria', 'auditor'],
      'hallazgo': ['hallazgo', 'no conformidad', 'problema'],
      'accion': ['acci√≥n', 'accion', 'correctiva', 'preventiva'],
      'documento': ['documento', 'archivo', 'manual'],
      'personal': ['personal', 'empleado', 'responsable'],
      'capacitacion': ['capacitaci√≥n', 'capacitacion', 'entrenamiento'],
      'minuta': ['minuta', 'reuni√≥n', 'reunion', 'acta']
    };

    const keywords = typeKeywords[type] || [];
    let bonus = 0;
    
    keywords.forEach(keyword => {
      if (question.includes(keyword)) {
        bonus += 3;
      }
    });
    
    return bonus;
  }

  /**
   * Genera respuesta con OpenAI
   */
  private async generateAIResponse(question: string, topResults: any[]): Promise<{ answer: string; confidence: number; sources: RAGSource[] }> {
    if (!topResults || topResults.length === 0) {
      return {
        answer: this.generateNoResultsResponse(question),
        confidence: 0,
        sources: []
      };
    }

    // Preparar contexto para OpenAI
    const context = topResults.map(item => 
      `Tipo: ${item.tipo}\nT√≠tulo: ${item.titulo}\nC√≥digo: ${item.codigo}\nContenido: ${item.contenido}`
    ).join('\n\n');

    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: `Eres un experto en Sistemas de Gesti√≥n de Calidad ISO 9001. 
            Responde bas√°ndote √∫nicamente en la informaci√≥n proporcionada. 
            Si no hay informaci√≥n suficiente, ind√≠calo claramente.
            Usa un tono profesional pero accesible.`
          },
          {
            role: 'user',
            content: `Pregunta: ${question}\n\nInformaci√≥n disponible:\n${context}`
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      const answer = response.choices[0].message.content || 'No se pudo generar una respuesta.';
      const confidence = Math.round(
        topResults.reduce((sum, item) => sum + item.relevance, 0) / topResults.length
      );

      const sources: RAGSource[] = topResults.map(item => ({
        tipo: item.tipo,
        titulo: item.titulo,
        codigo: item.codigo,
        relevancia: item.relevance,
        contenido: item.contenido.substring(0, 200) + '...'
      }));

      return { answer, confidence, sources };
    } catch (error) {
      console.error('Error generando respuesta con OpenAI:', error);
      return {
        answer: this.generateFallbackResponse(question, topResults),
        confidence: 50,
        sources: topResults.map(item => ({
          tipo: item.tipo,
          titulo: item.titulo,
          codigo: item.codigo,
          relevancia: item.relevance,
          contenido: item.contenido.substring(0, 200) + '...'
        }))
      };
    }
  }

  /**
   * Genera respuesta cuando no hay resultados
   */
  private generateNoResultsResponse(question: string): string {
    return `No encontr√© informaci√≥n espec√≠fica sobre "${question}" en el Sistema de Gesti√≥n de Calidad.\n\n` +
           `**Sugerencias:**\n` +
           `‚Ä¢ Reformula tu pregunta usando t√©rminos m√°s generales\n` +
           `‚Ä¢ Consulta directamente los m√≥dulos espec√≠ficos del sistema\n` +
           `‚Ä¢ Verifica que la informaci√≥n que buscas est√© registrada en el sistema`;
  }

  /**
   * Genera respuesta de respaldo sin IA
   */
  private generateFallbackResponse(question: string, topResults: any[]): string {
    let answer = `Bas√°ndome en la informaci√≥n del Sistema de Gesti√≥n de Calidad, aqu√≠ tienes lo que encontr√©:\n\n`;
    
    topResults.forEach((item, index) => {
      answer += `${index + 1}. **${item.titulo}** (${item.tipo})\n`;
      answer += `   ${item.contenido}\n`;
      if (item.codigo && item.codigo !== item.titulo) {
        answer += `   C√≥digo: ${item.codigo}\n`;
      }
      answer += `   Relevancia: ${item.relevance}%\n\n`;
    });

    return answer;
  }

  /**
   * Obtiene estad√≠sticas del sistema
   */
  async getSystemStats(organizationId?: string): Promise<any> {
    try {
      let sql = `
        SELECT 
          COUNT(*) as total,
          tipo,
          estado
        FROM rag_data
      `;
      
      const params: any[] = [];
      
      if (organizationId) {
        sql += ` WHERE organizacion_id = ?`;
        params.push(organizationId);
      }
      
      sql += ` GROUP BY tipo, estado`;
      
      const result = await this.mongoClient.execute(sql, params);
      
      // Procesar estad√≠sticas
      const stats = {
        total: 0,
        porTipo: {} as { [key: string]: number },
        porEstado: {} as { [key: string]: number }
      };
      
      result.rows?.forEach((row: any) => {
        stats.total += row.total;
        stats.porTipo[row.tipo] = (stats.porTipo[row.tipo] || 0) + row.total;
        stats.porEstado[row.estado] = (stats.porEstado[row.estado] || 0) + row.total;
      });
      
      return stats;
    } catch (error) {
      console.error('Error obteniendo estad√≠sticas:', error);
      throw error;
    }
  }
}
